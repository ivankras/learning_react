{"ast":null,"code":"import auth0 from 'auth0-js';\nimport history from './history';\nexport default class Auth {\n  constructor() {\n    this.auth0 = new auth0.WebAuth({\n      domain: 'test-react-udemy.auth0.com',\n      clientID: '6o7ZtfIX4DOp43pboX9OLaRBlO1Ld8O5',\n      redirectUri: 'http://localhost:3000/callback',\n      responseType: 'token id_token',\n      scope: 'openid profile email'\n    });\n\n    this.login = () => {\n      this.auth0.authorize();\n    };\n\n    this.handleAuth = () => {\n      this.auth0.parseHash((err, authResult) => {\n        if (authResult) {\n          console.log(authResult);\n          localStorage.setItem('access_token', authResult.accessToken);\n          localStorage.setItem('id_token', authResult.id_token);\n          let expiresAt = JSON.stringify(authResult.expiresIn * 1000 + new Date().getTime());\n          localStorage.setItem('expiresAt', expiresAt);\n          setTimeout(() => {\n            history.replace('/authcheck');\n          }, 200);\n        } else {\n          console.log(err);\n        }\n      });\n    };\n\n    this.logout = () => {\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('id_token');\n      localStorage.removeItem('expiresAt');\n    };\n\n    this.isAuthenticated = () => {\n      let expiresAt = JSON.parse(localStorage.getItem('expiresAt'));\n      return new Date().getTime() < expiresAt;\n    };\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\ivan.krasowski\\Documents\\React\\app7 - Auth0\\src\\utils\\auth.js"],"names":["auth0","history","Auth","WebAuth","domain","clientID","redirectUri","responseType","scope","login","authorize","handleAuth","parseHash","err","authResult","console","log","localStorage","setItem","accessToken","id_token","expiresAt","JSON","stringify","expiresIn","Date","getTime","setTimeout","replace","logout","removeItem","isAuthenticated","parse","getItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,eAAe,MAAMC,IAAN,CAAW;AAAA;AAAA,SACtBF,KADsB,GACd,IAAIA,KAAK,CAACG,OAAV,CAAkB;AACtBC,MAAAA,MAAM,EAAE,4BADc;AAEtBC,MAAAA,QAAQ,EAAE,kCAFY;AAGtBC,MAAAA,WAAW,EAAE,gCAHS;AAItBC,MAAAA,YAAY,EAAE,gBAJQ;AAKtBC,MAAAA,KAAK,EAAE;AALe,KAAlB,CADc;;AAAA,SAStBC,KATsB,GASd,MAAM;AACV,WAAKT,KAAL,CAAWU,SAAX;AACH,KAXqB;;AAAA,SAatBC,UAbsB,GAaT,MAAM;AACf,WAAKX,KAAL,CAAWY,SAAX,CAAqB,CAACC,GAAD,EAAMC,UAAN,KAAqB;AACtC,YAAIA,UAAJ,EAAgB;AACZC,UAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACAG,UAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCJ,UAAU,CAACK,WAAhD;AACAF,UAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCJ,UAAU,CAACM,QAA5C;AAEA,cAAIC,SAAS,GAAGC,IAAI,CAACC,SAAL,CAAgBT,UAAU,CAACU,SAAX,GAAqB,IAArB,GAA4B,IAAIC,IAAJ,GAAWC,OAAX,EAA5C,CAAhB;AACAT,UAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCG,SAAlC;AACAM,UAAAA,UAAU,CAAC,MAAM;AAAC1B,YAAAA,OAAO,CAAC2B,OAAR,CAAgB,YAAhB;AAA8B,WAAtC,EAAwC,GAAxC,CAAV;AACH,SARD,MAQO;AACHb,UAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACH;AACJ,OAZD;AAaH,KA3BqB;;AAAA,SA6BtBgB,MA7BsB,GA6Bb,MAAM;AACXZ,MAAAA,YAAY,CAACa,UAAb,CAAwB,cAAxB;AACAb,MAAAA,YAAY,CAACa,UAAb,CAAwB,UAAxB;AACAb,MAAAA,YAAY,CAACa,UAAb,CAAwB,WAAxB;AACH,KAjCqB;;AAAA,SAmCtBC,eAnCsB,GAmCJ,MAAM;AACpB,UAAIV,SAAS,GAAGC,IAAI,CAACU,KAAL,CAAWf,YAAY,CAACgB,OAAb,CAAqB,WAArB,CAAX,CAAhB;AACA,aAAO,IAAIR,IAAJ,GAAWC,OAAX,KAAuBL,SAA9B;AACH,KAtCqB;AAAA;;AAAA","sourcesContent":["import auth0 from 'auth0-js'\r\nimport history from './history'\r\n\r\nexport default class Auth {\r\n    auth0 = new auth0.WebAuth({\r\n        domain: 'test-react-udemy.auth0.com',\r\n        clientID: '6o7ZtfIX4DOp43pboX9OLaRBlO1Ld8O5',\r\n        redirectUri: 'http://localhost:3000/callback',\r\n        responseType: 'token id_token',\r\n        scope: 'openid profile email'\r\n    })\r\n\r\n    login = () => {\r\n        this.auth0.authorize()\r\n    }\r\n\r\n    handleAuth = () => {\r\n        this.auth0.parseHash((err, authResult) => {\r\n            if (authResult) {\r\n                console.log(authResult)\r\n                localStorage.setItem('access_token', authResult.accessToken)\r\n                localStorage.setItem('id_token', authResult.id_token)\r\n                \r\n                let expiresAt = JSON.stringify((authResult.expiresIn*1000 + new Date().getTime()))\r\n                localStorage.setItem('expiresAt', expiresAt)\r\n                setTimeout(() => {history.replace('/authcheck')}, 200)\r\n            } else {\r\n                console.log(err)\r\n            }\r\n        })\r\n    }\r\n\r\n    logout = () => {\r\n        localStorage.removeItem('access_token')\r\n        localStorage.removeItem('id_token')\r\n        localStorage.removeItem('expiresAt')\r\n    }\r\n    \r\n    isAuthenticated = () => {\r\n        let expiresAt = JSON.parse(localStorage.getItem('expiresAt'))\r\n        return new Date().getTime() < expiresAt\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}